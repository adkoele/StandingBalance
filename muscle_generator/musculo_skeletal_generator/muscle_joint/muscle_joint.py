""" MuscleJoint class """

import numpy as np


class GeyerMuscleJoint(object):
    """This class provides the interface between Muscles and Joints."""

    def __init__(self, muscle, joint, parameters):
        """ Class initialization."""
        self.muscle = muscle
        self.joint = joint
        self.theta_max = np.deg2rad(parameters.theta_max)
        self.theta_ref = np.deg2rad(parameters.theta_ref)
        self.r_0 = parameters.r_0
        if parameters.direction == 'cclockwise':
            self.direction = 1.
        elif parameters.direction == 'clockwise':
            self.direction = -1.

    def get_delta_length(self):
        """Function returns the change in length of the muscle"""
        return self.direction * self.r_0 * self.angle_tf(
            self.joint.joint_type,
            self.joint.joint_pos)

    def compute_torque(self):
        """Function computes the torque generated by
        the muscle on the joint."""
        moment_arm = self.angle_tf_prime(
            self.joint.joint_type, self.joint.joint_pos)
        torque = self.r_0 * self.muscle.f_se * moment_arm \
            * self.direction
        return torque

    def add_torque_to_joint(self):
        """Function adds torque to the respective joint."""
        self.joint.add_force(self.compute_torque())
        return

    def angle_tf_prime(self, joint_type, angle):
        """Function computes the moment_arm.

        Parameters
        ----------
        self: type
            description
        joint_type: GEYER/CONSTANT
            Type of joint moment arm and muscle length computation
        angle: float
            Joint angle
        """
        if (joint_type == 'CONSTANT'):
            return 1.0
        elif(joint_type == 'GEYER'):
            return np.cos(angle - self.theta_max)

    def angle_tf(self, joint_type, angle):
        """Function computes the delta length.

        Parameters
        ----------
        self: type
            description
        joint_type: GEYER/CONSTANT
            Type of joint moment arm and muscle length computation
        angle: float
            Joint angle
        """
        if (joint_type == 'CONSTANT'):
            return self.theta_ref - angle

        elif (joint_type == 'GEYER'):
            return np.sin(self.theta_max - angle) - np.sin(self.theta_max - self.theta_ref)

        else:
            alpha = np.cos(self.theta_max)
            return (
                np.sqrt(-2.0 * alpha * np.cos(angle) + alpha**2 + 1)
                - np.sqrt(
                    -2.0 * alpha * np.cos(
                        self.theta_ref) + alpha**2 + 1)) / alpha
        return
