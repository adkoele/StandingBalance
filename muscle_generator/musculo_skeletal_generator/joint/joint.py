""" Joint class """

import numpy as np


class GeyerJoint(object):
    """ This class implements the Joint instance for the musculo-skeletal
    system.
    """

    def __init__(self, parameters):
        """This function initializes the joint."""
        # Joint current angular position
        self.joint_pos = np.deg2rad(parameters.init_angle) +\
            np.deg2rad(parameters.reference_angle)
        # Joint Torque
        self.torque = 0.0
        # Torque generated by the joint limits
        self.torque_soft_limit = 0.0
        # Ligament stiffness
        # 17.19 #too large number will make learning harder
        self.soft_limit_stiffness = parameters.passive_stiffness
        # Joint velocity
        self.joint_vel = 0.0
        # Maximum joint angle
        #: Pylint : disable=no-member
        self.angle_max = np.deg2rad(
            parameters.joint_max)
        # Minimum joint angle
        self.angle_min = np.deg2rad(
            parameters.joint_min)
        # Angle reference/offset
        self.reference_angle = np.deg2rad(
            parameters.reference_angle)
        # New Joint angle
        self.new_angle = 0.0
        # Previous Joint angle
        self.prev_angle = 0.0
        # Either CONSTANT or GEYER
        self.joint_type = parameters.joint_type
        # Joint name
        self.name = parameters.name

    def update_angle(self, angle):
        """Function updates the joint angle.

        Parameters
        ----------
        angle: float
            Joint angle
        """
        self.joint_pos = angle + self.reference_angle

    def step(self, dt=0.001):
        """ This function updates the joint instance."""
        self.new_angle = self.joint_pos
        self.d_angle = (self.new_angle - self.prev_angle) / dt
        self.prev_angle = self.new_angle
        self.torque = 0.0
        self.compute_torque_soft_limit(dt)

    def add_force(self, torque):
        """ Add torque to the joint.

        Parameters
        ----------
        torque: float
            Muscle torque applied on to the joint
        """
        self.torque += torque

    def compute_torque_soft_limit(self, dt=0.001):
        """ This function computes the torque generated by the ligaments in
        the joint.
        """
        flag = (dt * 1000)
        force_ratio = 0.001
        n_vLim = 1.0 * 0.0175

        if self.joint_pos < self.angle_min and self.d_angle < n_vLim:
            #print("Name: {} Angle: {}, Min: {}".format(self.name, self.joint_pos, self.angle_min))
            self.torque_soft_limit = self.soft_limit_stiffness / flag * \
                (self.joint_pos - self.angle_min) * \
                (1.0 - self.d_angle / n_vLim / flag)
        elif self.joint_pos > self.angle_max and self.d_angle > -n_vLim:
            #print("Name: {} Angle: {}, Max: {}".format(self.name, self.joint_pos, self.angle_max))
            self.torque_soft_limit = self.soft_limit_stiffness / flag * \
                (self.joint_pos - self.angle_max) * \
                (1.0 + self.d_angle / n_vLim / flag)
        else:
            self.torque_soft_limit = 0.0

        self.torque_soft_limit *= force_ratio
        self.torque -= self.torque_soft_limit

    def compute_torque(self):
        """Function computes the net joint torque."""
        self.torque = self.torque
